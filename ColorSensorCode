#define __MAIN1__ 

/**
 * File name: ColorSensorExample.c
 * Devices: TM4C123
 * Description: Red, blue, or green board LEDs turn on if sensdor detects a red, blue, or green color object respectively. 
 * Authors: Dario Jimenez
 * Last Modified: 10/18/21
 */

/** General imports. These can be declared the like the example below. */

#include <stdlib.h>
# include <stdio.h>
# include <stdint.h>
# include <stdbool.h>

/** 
 * Device specific imports. Include files and library files are accessed like
 * the below examples.
 */
#include <lib/PLL/PLL.h>
#include <lib/GPIO/GPIO.h>
#include <lib/Timer/Timer.h>
#include <raslib/ColorSensor/ColorSensor.h>
# include <raslib/LineSensor/LineSensor.h>
# include <raslib/DistanceSensor/DistanceSensor.h>
#include <lib/I2C/I2C.h>
# include <lib/ADC/ADC.h>
# include <lib/UART/UART.h>
# include <raslib/Servo/Servo.h>


/** 
 * These function declarations are defined in the startup.s assembly file for
 * managing interrupts. 
 */
void EnableInterrupts(void);    // Defined in startup.s
void DisableInterrupts(void);   // Defined in startup.s
void WaitForInterrupt(void);    // Defined in startup.s

#ifdef __MAIN1__	
/** Your main execution loop. */
int main(void) {
	
	/* Clock setup. */
	
	PLLInit(BUS_80_MHZ);
  DisableInterrupts();
  DelayInit();
	
	int Yes;
	int LightValue;
	int CurrentLightValue;
	
    
		
		/* configuration for red built-in */
		GPIOConfig_t redLED = {
			.pin=PIN_F1,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* configuration for blue built-in */
		GPIOConfig_t blueLED = {
			.pin=PIN_F2,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* configuration for green built-in */
		GPIOConfig_t greenLED = {
			.pin=PIN_F3,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* Initialize GPIO pins */
		GPIOInit(redLED);
		GPIOInit(blueLED);
		GPIOInit(greenLED);

		/* I2C configuration */
    I2CConfig_t i2ccon =  {
				.module=I2C_MODULE_0, // This uses pins PB2 (SCL) and PB3 (SDA).
				.speed=I2C_SPEED_400_KBPS //baud rate of 400 kilobits per second
		};
		
		/* color sensor configuration */
		ColorSensorConfig_t config = {
			.I2CConfig= i2ccon, 
			.isInterrupt=true, //use interrupt 
			.samplingFrequency = 200, //200 hz
			.timerID=TIMER_1A //timer 1A
		};
		
		/* Initialize color sensor */
		ColorSensor_t sensor = ColorSensorInit(config);
		
		EnableInterrupts();
    PWM_t LeftServo = ServoInit(M0_PB6);
    PWM_t RightServo = ServoInit(M0_PB7);
    ServoStop(LeftServo);
    ServoStop(RightServo);

    
    while (Yes) 
		{
			
		// Finding the color we are looking for
		
			/* if all RGB values are under 0x10 (no object is likely in front of the sensor) turn off all LEDs */
			if( (sensor.RedValue < 0x10) && (sensor.BlueValue < 0x10) && (sensor.GreenValue < 0x10) ){
				GPIOSetBit(PIN_F1, 0);
				GPIOSetBit(PIN_F2, 0);
				GPIOSetBit(PIN_F3, 0);
				
				LightValue =0;

				
			}
			
			// Checks to see what color we are on
			else
			{
				/* turns on red LED if highest RGB value is red (i.e. a red object is placed in front of sensor) */
				if((sensor.RedValue> sensor.GreenValue) && (sensor.RedValue > sensor.BlueValue)) 
				{
					GPIOSetBit(PIN_F1, 1);
					LightValue = 1;
					Yes = 0;
				}
				else 
				{
					GPIOSetBit(PIN_F1, 0);
					LightValue = 0;
				}
				
				/* turns on blue LED if highest RGB value is blue (i.e. a blue object is placed in front of sensor) */
				if((sensor.BlueValue> sensor.RedValue) && (sensor.BlueValue > sensor.GreenValue)) 
				{
					GPIOSetBit(PIN_F2, 1);
					LightValue = 2; 
					Yes = 0;
				}
				else
				{
					GPIOSetBit(PIN_F2, 0);
					LightValue = 0;
				}
				
				/* turns on green LED if highest RGB value is green (i.e. a green object is placed in front of sensor) */
				if((sensor.GreenValue> sensor.RedValue) && (sensor.GreenValue > sensor.BlueValue))
				{
					GPIOSetBit(PIN_F3, 1);
					LightValue = 3;
					Yes = 0;
				}
				else
				{
					GPIOSetBit(PIN_F3, 0);
					LightValue = 0;
				}
									 
			}
			
			ServoSetSpeed(RightServo, 40);
      ServoSetSpeed(LeftServo, 40);
    }
		// actually moving on what we gathered
		
		Yes =1; // restarting the loop
		
		while(Yes)
		{
			if( (sensor.RedValue < 0x10) && (sensor.BlueValue < 0x10) && (sensor.GreenValue < 0x10) ){
				GPIOSetBit(PIN_F1, 0);
				GPIOSetBit(PIN_F2, 0);
				GPIOSetBit(PIN_F3, 0);
				
				CurrentLightValue =0;

				
			}
			
			// Checks to see what color we are on
			else
			{
				/* turns on red LED if highest RGB value is red (i.e. a red object is placed in front of sensor) */
				if((sensor.RedValue> sensor.GreenValue) && (sensor.RedValue > sensor.BlueValue)) 
				{
					GPIOSetBit(PIN_F1, 1);
					CurrentLightValue = 1;
				}
				else 
				{
					GPIOSetBit(PIN_F1, 0);
					CurrentLightValue = 0;
				}
				
				/* turns on blue LED if highest RGB value is blue (i.e. a blue object is placed in front of sensor) */
				if((sensor.BlueValue> sensor.RedValue) && (sensor.BlueValue > sensor.GreenValue)) 
				{
					GPIOSetBit(PIN_F2, 1);
					CurrentLightValue = 2; 
				}
				else
				{
					GPIOSetBit(PIN_F2, 0);
					CurrentLightValue = 0;
				}
				
				/* turns on green LED if highest RGB value is green (i.e. a green object is placed in front of sensor) */
				if((sensor.GreenValue> sensor.RedValue) && (sensor.GreenValue > sensor.BlueValue))
				{
					GPIOSetBit(PIN_F3, 1);
					CurrentLightValue = 3;
				}
				else
				{
					GPIOSetBit(PIN_F3, 0);
					CurrentLightValue = 0;
				}
									 
			}
			// Moves the LeftServos a little before we check for the value so that it puts it a little ahead in the zone to hopefully put it in front of the botton
			ServoSetSpeed(RightServo, 40);
      ServoSetSpeed(LeftServo, 40);
			
			if(LightValue == CurrentLightValue)
			{
				Yes = 0;
				ServoStop(LeftServo);
				ServoStop(RightServo);
				
			}
			
		}
		
		// makes turn to button
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		//Goes Straight to touch button
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		// Back up from button
		
		ServoSetSpeed(RightServo, -40);
    ServoSetSpeed(LeftServo, -40);// set one to 0
		DelayMillisec(150);
		
		//Turn towards exit
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
		//Goes Straight along hall
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		//Turn towards exit
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
		//exits
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
	// End of ColorSense 	


}
#endif

#ifdef __MAIN2__  

int main(void) {
    /**
     * @brief This program demonstrates intializing a line sensor with 8 pins:
     * PE3, PE2, PE1, PE0, PD3, PD2, PD1, and PD0 and reading from it manually
     * on demand as both integer and boolean values.
     */
    PLLInit(BUS_80_MHZ);
    DisableInterrupts();
    DelayInit();


    LineSensorConfig_t config = {
        .pins={AIN1, AIN2, AIN3, AIN4, AIN5, AIN6, AIN7, AIN8},
        .numPins=8,
    };

    /* Initialization of ADC */
    LineSensor_t sensor = LineSensorInit(config);

    GPIOConfig_t LED1 = {PIN_F1, GPIO_PULL_DOWN, true, 0, false, GPIO_DRIVE_2MA, false};
    GPIOInit(LED1);

    GPIOConfig_t LED2 = {PIN_F2, GPIO_PULL_DOWN, true, 0, false, GPIO_DRIVE_2MA, false};
    GPIOInit(LED2);

    GPIOConfig_t LED3 = {PIN_F3, GPIO_PULL_DOWN, true, 0, false, GPIO_DRIVE_2MA, false};
    GPIOInit(LED3);

    GPIOConfig_t LED4 = {PIN_F4, GPIO_PULL_DOWN, true, 0, false, GPIO_DRIVE_2MA, false};
    GPIOInit(LED4);



    EnableInterrupts();
    PWM_t servo = ServoInit(M0_PB6);
    PWM_t servo2 = ServoInit(M0_PB7);
    ServoStop(servo);
    ServoStop(servo2);
    int deepTurn = 0;

    /* Main loop: read line sensor and get boolean array, turn on LEDs depending
       on values from boolean array. */
    while(1) {
        /* Read from the line sensor. */
        LineSensorGetIntArray(&sensor);

        /* Here, you should check your debugger to see what is inside the sensor
           values array! */

        /* Read from the line sensor again, but this time using a threshold.
           This threshold corresponds to 2048 / 4095 * 3.3 V. */
        LineSensorGetBoolArray(&sensor, 2048);

                       //low for turning
                       int lowSpeed = 25;
                       deepTurn = 60;
                       uint8_t avgSide = 0;
                       uint8_t i;
                       for (i = 0; i < 8; ++i) {
                           avgSide += sensor.values[i] << i;

                           //shreeyas weight code

                           if(sensor.values[i]==1)
                           {
                               deepTurn -= 5;
                           }



                          }


        /* Turn on RED LED if sensor data is none across the board. */
        if (avgSide == 0) {
            GPIOSetBit(PIN_F1, 1);
            GPIOSetBit(PIN_F2, 0);
            GPIOSetBit(PIN_F3, 0);
            DelayMillisec(150);


//                                      ServoSetSpeed(servo, 20);
//                                      ServoSetSpeed(servo2, 30);
//                                      DelayMillisec(150);
//                                      ServoSetSpeed(servo, 30);
//                                      ServoSetSpeed(servo2, 20);
//                                      DelayMillisec(300);

                                  //if you just need to give up
                               /* ServoSetSpeed(servo,  0);
                                 ServoSetSpeed(servo2, 0);*/
                                                  ServoSetSpeed(servo, -40);
                                                  ServoSetSpeed(servo2, -40);
                                                  DelayMillisec(300);

            ServoStop(servo);
            ServoStop(servo2);
            DelayMillisec(150);
        }
        /* Turn on GREEN LED if sensor data is tending towards the left side. */
        else if (avgSide >= 0x10) {
            GPIOSetBit(PIN_F1, 0);
            GPIOSetBit(PIN_F2, 0);
            GPIOSetBit(PIN_F3, 1);
            DelayMillisec(150);
            if(avgSide==0x10)
            {
                            ServoSetSpeed(servo2, 30);
                            ServoSetSpeed(servo, 30);
                            DelayMillisec(100);
                            ServoStop(servo);
                            ServoStop(servo2);
                            DelayMillisec(150);

            }
            else
            {
                        ServoSetSpeed(servo2, lowSpeed);
                        ServoSetSpeed(servo, deepTurn);
                        DelayMillisec(150);
                        ServoStop(servo);
                        ServoStop(servo2);
                        DelayMillisec(150);
//                        ServoSetSpeed(servo2, 25);
//                        ServoSetSpeed(servo, 45);
//                        DelayMillisec(150);
//                        ServoStop(servo);
//                        ServoStop(servo2);
//                        DelayMillisec(150);


            }

;
        }
        /* Turn on BLUE LED if sensor data is tending towards the right side. */
        else {
            GPIOSetBit(PIN_F1, 0);
            GPIOSetBit(PIN_F2, 1);
            GPIOSetBit(PIN_F3, 0);
            DelayMillisec(150);

           ServoSetSpeed(servo2, deepTurn);
           ServoSetSpeed(servo, lowSpeed);
           DelayMillisec(150);
           ServoStop(servo);
           ServoStop(servo2);
           DelayMillisec(150);

        }
    }
}
#endif

#ifdef __MAIN3__ 
int main(void) {
    /**
     * @brief This program demonstrates intializing a line sensor with 8 pins:
     * PE3, PE2, PE1, PE0, PD3, PD2, PD1, and PD0 and reading from it
     * automagically using an interrupt on TIMER0A. It reads at 20 Hz. It also
     * uses a thresholding feature to convert values into a boolean array based
     * on a threshold.
     */
    PLLInit(BUS_80_MHZ);
    DisableInterrupts();

    LineSensorConfig_t config = {
        .pins={AIN1, AIN2, AIN3, AIN4, AIN5, AIN6, AIN7, AIN8},
        .numPins=8,
        .repeatFrequency=20,
        .isThresholded=true,
        .threshold=2048 // This threshold corresponds to 2048 / 4095 * 3.3 V.
        // Uses ADC Module 0, Sequencer 0, Timer 0A by default.
    };

    /* Initialization of ADC. */
    LineSensor_t sensor = LineSensorInit(config);

    /* Initialize PF1 as a GPIO output. This is associated with the RED led on
       the TM4C. */
    GPIOConfig_t PF1Config = {
        .pin=PIN_F1,
        .pull=GPIO_PULL_DOWN,
        .isOutput=true,
        .alternateFunction=0,
        .isAnalog=false,
        .drive=GPIO_DRIVE_2MA,
        .enableSlew=false
    };

    /* Initialize PF2 as a GPIO output. This is associated with the BLUE led on
       the TM4C. */
    GPIOConfig_t PF2Config = {
        PIN_F2,
        GPIO_PULL_DOWN,
        true
    };

    /* Initialize PF3 as a GPIO output. This is associated with the GREEN led on
       the TM4C. */
    GPIOConfig_t PF3Config = {
        PIN_F3,
        GPIO_PULL_DOWN,
        true
    };
    GPIOInit(PF1Config);
    GPIOInit(PF2Config);
    GPIOInit(PF3Config);


    EnableInterrupts();

    /* Main loop: read line sensor and get boolean array, turn on LEDs depending on values from boolean array */
    while(1) {
        uint8_t avgSide = 0;
        uint8_t i;
        for (i = 0; i < 8; ++i) {
            avgSide += sensor.values[i] << i;
        }

        /* Turn on RED LED if sensor data is none across the board. */
        if (avgSide == 0) {
            GPIOSetBit(PIN_F1, 1);
            GPIOSetBit(PIN_F2, 0);
            GPIOSetBit(PIN_F3, 0);
        }
        /* Turn on GREEN LED if sensor data is tending towards the left side. */
        else if (avgSide >= 0x10) {
            GPIOSetBit(PIN_F1, 0);
            GPIOSetBit(PIN_F2, 0);
            GPIOSetBit(PIN_F3, 1);
        }
        /* Turn on BLUE LED if sensor data is tending towards the right side. */
        else {
            GPIOSetBit(PIN_F1, 0);
            GPIOSetBit(PIN_F2, 1);
            GPIOSetBit(PIN_F3, 0);
        }
    }
}
#endif



}
