/**
 * File name: ColorSensorExample.c
 * Devices: TM4C123
 * Description: Red, blue, or green board LEDs turn on if sensdor detects a red, blue, or green color object respectively. 
 * Authors: Dario Jimenez
 * Last Modified: 10/18/21
 */

/** General imports. These can be declared the like the example below. */

#include <stdlib.h>
# include <stdio.h>
# include <stdint.h>
# include <stdbool.h>

/** 
 * Device specific imports. Include files and library files are accessed like
 * the below examples.
 */
#include <lib/PLL/PLL.h>
#include <lib/GPIO/GPIO.h>
#include <lib/Timer/Timer.h>
#include <raslib/ColorSensor/ColorSensor.h>
#include <lib/I2C/I2C.h>
# include <lib/ADC/ADC.h>
# include <lib/UART/UART.h>
# include <raslib/Servo/Servo.h>


/** 
 * These function declarations are defined in the startup.s assembly file for
 * managing interrupts. 
 */
void EnableInterrupts(void);    // Defined in startup.s
void DisableInterrupts(void);   // Defined in startup.s
void WaitForInterrupt(void);    // Defined in startup.s

/** Your main execution loop. */
int main(void) {
	
	/* Clock setup. */
	
	PLLInit(BUS_80_MHZ);
  DisableInterrupts();
  DelayInit();
	
	int Yes;
	int LightValue;
	int CurrentLightValue;
	
    
		
		/* configuration for red built-in */
		GPIOConfig_t redLED = {
			.pin=PIN_F1,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* configuration for blue built-in */
		GPIOConfig_t blueLED = {
			.pin=PIN_F2,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* configuration for green built-in */
		GPIOConfig_t greenLED = {
			.pin=PIN_F3,
			.isOutput=true,
			.pull=GPIO_PULL_DOWN,
		};
		
		/* Initialize GPIO pins */
		GPIOInit(redLED);
		GPIOInit(blueLED);
		GPIOInit(greenLED);

		/* I2C configuration */
    I2CConfig_t i2ccon =  {
				.module=I2C_MODULE_0, // This uses pins PB2 (SCL) and PB3 (SDA).
				.speed=I2C_SPEED_400_KBPS //baud rate of 400 kilobits per second
		};
		
		/* color sensor configuration */
		ColorSensorConfig_t config = {
			.I2CConfig= i2ccon, 
			.isInterrupt=true, //use interrupt 
			.samplingFrequency = 200, //200 hz
			.timerID=TIMER_1A //timer 1A
		};
		
		/* Initialize color sensor */
		ColorSensor_t sensor = ColorSensorInit(config);
		
		EnableInterrupts();
    PWM_t LeftServo = ServoInit(M0_PB6);
    PWM_t RightServo = ServoInit(M0_PB7);
    ServoStop(LeftServo);
    ServoStop(RightServo);

    
    while (Yes) 
		{
			
		// Finding the color we are looking for
		
			/* if all RGB values are under 0x10 (no object is likely in front of the sensor) turn off all LEDs */
			if( (sensor.RedValue < 0x10) && (sensor.BlueValue < 0x10) && (sensor.GreenValue < 0x10) ){
				GPIOSetBit(PIN_F1, 0);
				GPIOSetBit(PIN_F2, 0);
				GPIOSetBit(PIN_F3, 0);
				
				LightValue =0;

				
			}
			
			// Checks to see what color we are on
			else
			{
				/* turns on red LED if highest RGB value is red (i.e. a red object is placed in front of sensor) */
				if((sensor.RedValue> sensor.GreenValue) && (sensor.RedValue > sensor.BlueValue)) 
				{
					GPIOSetBit(PIN_F1, 1);
					LightValue = 1;
					Yes = 0;
				}
				else 
				{
					GPIOSetBit(PIN_F1, 0);
					LightValue = 0;
				}
				
				/* turns on blue LED if highest RGB value is blue (i.e. a blue object is placed in front of sensor) */
				if((sensor.BlueValue> sensor.RedValue) && (sensor.BlueValue > sensor.GreenValue)) 
				{
					GPIOSetBit(PIN_F2, 1);
					LightValue = 2; 
					Yes = 0;
				}
				else
				{
					GPIOSetBit(PIN_F2, 0);
					LightValue = 0;
				}
				
				/* turns on green LED if highest RGB value is green (i.e. a green object is placed in front of sensor) */
				if((sensor.GreenValue> sensor.RedValue) && (sensor.GreenValue > sensor.BlueValue))
				{
					GPIOSetBit(PIN_F3, 1);
					LightValue = 3;
					Yes = 0;
				}
				else
				{
					GPIOSetBit(PIN_F3, 0);
					LightValue = 0;
				}
									 
			}
			
			ServoSetSpeed(RightServo, 40);
      ServoSetSpeed(LeftServo, 40);
    }
		// actually moving on what we gathered
		
		Yes =1; // restarting the loop
		
		while(Yes)
		{
			if( (sensor.RedValue < 0x10) && (sensor.BlueValue < 0x10) && (sensor.GreenValue < 0x10) ){
				GPIOSetBit(PIN_F1, 0);
				GPIOSetBit(PIN_F2, 0);
				GPIOSetBit(PIN_F3, 0);
				
				CurrentLightValue =0;

				
			}
			
			// Checks to see what color we are on
			else
			{
				/* turns on red LED if highest RGB value is red (i.e. a red object is placed in front of sensor) */
				if((sensor.RedValue> sensor.GreenValue) && (sensor.RedValue > sensor.BlueValue)) 
				{
					GPIOSetBit(PIN_F1, 1);
					CurrentLightValue = 1;
				}
				else 
				{
					GPIOSetBit(PIN_F1, 0);
					CurrentLightValue = 0;
				}
				
				/* turns on blue LED if highest RGB value is blue (i.e. a blue object is placed in front of sensor) */
				if((sensor.BlueValue> sensor.RedValue) && (sensor.BlueValue > sensor.GreenValue)) 
				{
					GPIOSetBit(PIN_F2, 1);
					CurrentLightValue = 2; 
				}
				else
				{
					GPIOSetBit(PIN_F2, 0);
					CurrentLightValue = 0;
				}
				
				/* turns on green LED if highest RGB value is green (i.e. a green object is placed in front of sensor) */
				if((sensor.GreenValue> sensor.RedValue) && (sensor.GreenValue > sensor.BlueValue))
				{
					GPIOSetBit(PIN_F3, 1);
					CurrentLightValue = 3;
				}
				else
				{
					GPIOSetBit(PIN_F3, 0);
					CurrentLightValue = 0;
				}
									 
			}
			// Moves the LeftServos a little before we check for the value so that it puts it a little ahead in the zone to hopefully put it in front of the botton
			ServoSetSpeed(RightServo, 40);
      ServoSetSpeed(LeftServo, 40);
			
			if(LightValue == CurrentLightValue)
			{
				Yes = 0;
				ServoStop(LeftServo);
				ServoStop(RightServo);
				
			}
			
		}
		
		// makes turn to button
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		//Goes Straight to touch button
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		// Back up from button
		
		ServoSetSpeed(RightServo, -40);
    ServoSetSpeed(LeftServo, -40);// set one to 0
		DelayMillisec(150);
		
		//Turn towards exit
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
		//Goes Straight along hall
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		//Turn towards exit
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
		//exits
		
		ServoSetSpeed(RightServo, 40);
    ServoSetSpeed(LeftServo, 40);// set one to 0
		DelayMillisec(150);
		
		
		// 
		
}
